// Subset font created by SubsetFontCreator
// For subset: "  --0:AACCFFMMPPSS°°"

#ifndef MyriadPro_Regular_24_1bRt_h
#define MyriadPro_Regular_24_1bRt_h

#include "XFontGlyph.h"
#include "XFontR1BitDataStream.h"

namespace MyriadPro_Regular_24_1bRt
{
	const FontHeader	fontHeader PROGMEM =
	{
		1,		// version, currently version = 1
		1,		// oneBit, 1 = 1 bit per pixel, 0 = 8 bit (antialiased)
		1,		// rotated, glyph data is rotated (applies to 1 bit only)
		0,		// wideOffsets, 1 = 32 bit, 0 = 16 bit glyph data offsets
		0,		// monospaced, fixed width font (for this subset)
		18,		// ascent, font in pixels
		-6,		// descent, font in pixels
		29,		// height, font height (ascent+descent+leading) in pixels
		19,		// width, widest glyph advanceX within subset in pixels
		11,		// numCharcodeRuns
		20		// numCharCodes
	};
	
	const CharcodeRun	charcodeRun[] PROGMEM = // {start, entryIndex}, ...
	{
		{0x0020, 0}, {0x002D, 1}, {0x0030, 2}, {0x0041, 13}, {0x0043, 14},
		{0x0046, 15}, {0x004D, 16}, {0x0050, 17}, {0x0053, 18}, {0x00B0, 19},
		{0xFFFF, 20}
	};
	
	const uint16_t	glyphDataOffset[] PROGMEM =
	{
		0x0000, 0x0005, 0x000C, 0x0025, 0x0036, 0x004F, 0x0068, 0x0085,
		0x009E, 0x00B9, 0x00D2, 0x00EB, 0x0104, 0x010E, 0x012F, 0x014E,
		0x0167, 0x0191, 0x01AC, 0x01C7, 0x01D1
	};
	
	const uint8_t	glyphData[] PROGMEM =
	{
		0x05, 0x00, 0x12, 0x00, 0x00, 0x07, 0x01, 0x0B, 0x02, 0x06, 0xFF, 0x0F,
		0x0C, 0x01, 0x02, 0x10, 0x0A, 0xF0, 0x0F, 0xFC, 0x3F, 0x0E, 0x70, 0x03,
		0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x06, 0x60, 0xFE, 0x7F, 0xF8,
		0x1F, 0x0C, 0x02, 0x02, 0x10, 0x06, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00,
		0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x0C, 0x01, 0x02, 0x10, 0x0A, 0x00,
		0xC0, 0x06, 0xE0, 0x03, 0xF0, 0x03, 0xF8, 0x03, 0xDC, 0x03, 0xCE, 0x03,
		0xC7, 0xCE, 0xC3, 0xFE, 0xC0, 0x38, 0xC0, 0x0C, 0x01, 0x02, 0x10, 0x0A,
		0x00, 0x60, 0x02, 0xC0, 0xC3, 0xC0, 0xC3, 0xC0, 0xC3, 0xC0, 0xC3, 0xC0,
		0xE7, 0xC1, 0x3E, 0x77, 0x3C, 0x3F, 0x00, 0x1C, 0x0C, 0x00, 0x02, 0x10,
		0x0C, 0x00, 0x0C, 0x00, 0x0E, 0x80, 0x0F, 0xC0, 0x0C, 0x70, 0x0C, 0x38,
		0x0C, 0x0E, 0x0C, 0x03, 0x0C, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x0C, 0x00,
		0x0C, 0x0C, 0x01, 0x02, 0x10, 0x0A, 0x00, 0x40, 0xF8, 0xC0, 0xFF, 0xC0,
		0xC3, 0xC0, 0xC3, 0xC0, 0xC3, 0xC0, 0xC3, 0x61, 0x83, 0x73, 0x03, 0x3F,
		0x00, 0x0E, 0x0C, 0x01, 0x02, 0x10, 0x0B, 0xE0, 0x1F, 0xF0, 0x3F, 0x9C,
		0x70, 0xCC, 0xC0, 0x46, 0xC0, 0x62, 0xC0, 0x43, 0xC0, 0xC3, 0xE0, 0xC3,
		0x7F, 0x80, 0x3F, 0x00, 0x04, 0x0C, 0x01, 0x02, 0x10, 0x0A, 0x03, 0x00,
		0x03, 0x80, 0x03, 0xE0, 0x03, 0xF8, 0x03, 0x3E, 0x83, 0x0F, 0xE3, 0x01,
		0x7B, 0x00, 0x1F, 0x00, 0x07, 0x00, 0x0C, 0x01, 0x02, 0x10, 0x0A, 0x00,
		0x3C, 0x7C, 0x7E, 0x7E, 0x63, 0xC3, 0xC1, 0xC3, 0xC0, 0x83, 0xC1, 0xC3,
		0xC1, 0x67, 0xC3, 0x7E, 0x7F, 0x1C, 0x3E, 0x0C, 0x01, 0x02, 0x10, 0x0A,
		0xF8, 0x00, 0xFC, 0xC1, 0x86, 0xC3, 0x03, 0xC3, 0x03, 0xC3, 0x03, 0x63,
		0x03, 0x73, 0x07, 0x39, 0xFE, 0x1F, 0xFC, 0x07, 0x05, 0x01, 0x07, 0x0B,
		0x03, 0x02, 0x3A, 0xF8, 0xC1, 0x01, 0x0F, 0x01, 0x01, 0x11, 0x0D, 0x00,
		0xC0, 0x01, 0xF0, 0x03, 0xFC, 0x01, 0x7F, 0xC0, 0xCF, 0xE0, 0x83, 0xC1,
		0x01, 0x83, 0x1F, 0x06, 0xF8, 0x0D, 0x80, 0x3F, 0x00, 0xF8, 0x03, 0x80,
		0x0F, 0x00, 0x18, 0x0E, 0x01, 0x01, 0x11, 0x0C, 0xE0, 0x0F, 0xF0, 0x7F,
		0xF0, 0xE0, 0x71, 0x00, 0x67, 0x00, 0x6C, 0x00, 0xF0, 0x00, 0xE0, 0x01,
		0xC0, 0x03, 0x80, 0x07, 0x00, 0x0F, 0x00, 0x16, 0x00, 0x04, 0x0C, 0x02,
		0x01, 0x11, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x06, 0x18, 0x0C, 0x30,
		0x18, 0x60, 0x30, 0xC0, 0x60, 0x80, 0xC1, 0x00, 0x03, 0x00, 0x00, 0x13,
		0x01, 0x01, 0x11, 0x11, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x39, 0x00,
		0xE0, 0x07, 0x00, 0x7E, 0x00, 0xE0, 0x07, 0x00, 0x7E, 0x00, 0xC0, 0x01,
		0xF0, 0x01, 0x7C, 0x00, 0x1F, 0xC0, 0x07, 0xE0, 0x01, 0xC0, 0xFF, 0x81,
		0xFF, 0xFF, 0x00, 0xFC, 0x01, 0x0D, 0x02, 0x01, 0x11, 0x0A, 0xFF, 0xFF,
		0xFF, 0xFF, 0x0F, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0xC0, 0xC0,
		0x00, 0xE7, 0x00, 0xFE, 0x00, 0xF0, 0x00, 0x00, 0x0C, 0x01, 0x01, 0x11,
		0x0A, 0x38, 0xC0, 0xF8, 0x00, 0xFB, 0x03, 0x1E, 0x0E, 0x3C, 0x18, 0x78,
		0x70, 0xF0, 0xC0, 0xE0, 0x81, 0x73, 0x02, 0x7E, 0x00, 0x78, 0x00, 0x08,
		0x01, 0x01, 0x06, 0x06, 0xDE, 0x1C, 0x86, 0xB3, 0x07
	};
	
	// Usage: Copy the 3 commented lines to your code, removing the comments.
	//#include "XFont.h"
	//XFont xFont;
	//#include "MyriadPro-Regular_24_1bRt.h"
	
	DataStream_P	dataStream(glyphData, sizeof(glyphData));
	XFontR1BitDataStream xFontDataStream(&xFont, &dataStream);
	XFont::Font font(&fontHeader, charcodeRun, glyphDataOffset, &xFontDataStream);
	
	// Usage: The display needs to be set before using xFont.  This only needs
	// to be done once at the beginning of the program.
	// Use xFont.SetDisplay(&display, &MyriadPro_Regular_24_1bRt::font); to do this.
	// To change to this font anywhere after setting the display,
	// use: xFont.SetFont(&MyriadPro_Regular_24_1bRt::font);
}

#endif // MyriadPro_Regular_24_1bRt_h

